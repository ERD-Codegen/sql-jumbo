export const cols = [
  "avatar",
  "category",
  "comment",
  "createdAt",
  "email",
  "group",
  "id",
  "name",
  "password",
  "phone",
  "status",
  "title",
  "token",
  "updatedAt",
  "accessLevel",
  "accountType",
  "address",
  "age",
  "amount",
  "avatar",
  "balance",
  "birthDate",
  "category",
  "city",
  "comment",
  "companyName",
  "completedAt",
  "country",
  "createdAt",
  "creditCard",
  "currency",
  "department",
  "description",
  "deviceId",
  "discount",
  "email",
  "employeeId",
  "endDate",
  "expiryDate",
  "firstName",
  "gender",
  "group",
  "id",
  "ipAddress",
  "isActive",
  "isAdmin",
  "isDeleted",
  "isVerified",
  "lastName",
  "latitude",
  "loginAttempts",
  "longitude",
  "metadata",
  "middleName",
  "name",
  "nickname",
  "orderId",
  "orderStatus",
  "password",
  "paymentMethod",
  "phone",
  "postalCode",
  "price",
  "priority",
  "productCode",
  "quantity",
  "rating",
  "referralCode",
  "role",
  "salary",
  "score",
  "sessionId",
  "shippingAddress",
  "signature",
  "size",
  "sku",
  "startDate",
  "state",
  "status",
  "street",
  "tags",
  "taxRate",
  "thumbnail",
  "timezone",
  "title",
  "token",
  "totalAmount",
  "type",
  "unit",
  "updatedAt",
  "url",
  "username",
  "uuid",
  "validUntil",
  "value",
  "version",
  "weight",
  "zipCode",
  "abandonedCartId",
  "accessLevel",
  "accountNumber",
  "accountStatus",
  "accountType",
  "actionType",
  "activeDevices",
  "address",
  "addressLine1",
  "addressLine2",
  "adminNotes",
  "age",
  "agentId",
  "albumId",
  "alertType",
  "algorithm",
  "amount",
  "analyticsId",
  "apiKey",
  "apiVersion",
  "appVersion",
  "articleId",
  "attachmentUrl",
  "attemptCount",
  "audioUrl",
  "authMethod",
  "authToken",
  "authorId",
  "avatar",
  "awardDate",
  "backupEmail",
  "balance",
  "bankAccount",
  "bannerImage",
  "batchId",
  "billingCycle",
  "billingFrequency",
  "birthDate",
  "blogId",
  "bluetoothId",
  "bookingDate",
  "brandId",
  "browserType",
  "budgetCode",
  "buildNumber",
  "businessType",
  "cacheKey",
  "campaignId",
  "cancelReason",
  "cardHolder",
  "cardNumber",
  "cartId",
  "category",
  "certificateId",
  "channelId",
  "chargeId",
  "chatId",
  "checkInTime",
  "checkOutTime",
  "childId",
  "cityName",
  "claimId",
  "clientId",
  "clockIn",
  "clockOut",
  "cloudId",
  "code",
  "colorCode",
  "comment",
  "companyId",
  "companyLogo",
  "companyName",
  "completedAt",
  "completionRate",
  "configId",
  "connectionString",
  "contactEmail",
  "contactName",
  "contactPhone",
  "content",
  "contentType",
  "contractId",
  "coordinateX",
  "coordinateY",
  "copyRight",
  "costCenter",
  "countryCode",
  "couponCode",
  "courseId",
  "coverImage",
  "createdAt",
  "creditLimit",
  "creditScore",
  "currencyCode",
  "customField1",
  "customField2",
  "customerGroup",
  "customerId",
  "cvv",
  "dailyLimit",
  "dashboardId",
  "dataSource",
  "dateFormat",
  "deactivatedAt",
  "dealerId",
  "defaultLang",
  "defaultValue",
  "deletedAt",
  "deliveryDate",
  "departmentCode",
  "dependentId",
  "depositAmount",
  "description",
  "deviceToken",
  "deviceType",
  "dialCode",
  "dimension",
  "discountCode",
  "displayName",
  "displayOrder",
  "distributorId",
  "documentId",
  "domainName",
  "downloadCount",
  "driverLicense",
  "dueDateAt",
  "duration",
  "earnedPoints",
  "editedAt",
  "education",
  "emailStatus",
  "emergencyContact",
  "employeeCode",
  "employmentDate",
  "enabledAt",
  "endPoint",
  "enrollmentDate",
  "entityId",
  "entryPoint",
  "errorCode",
  "errorMessage",
  "eventDate",
  "exchangeRate",
  "expiryMonth",
  "expiryYear",
  "exportId",
  "extractId",
  "facilityId",
  "favoriteCount",
  "faxNumber",
  "feedId",
  "feedbackId",
  "fileHash",
  "fileName",
  "fileSize",
  "fileType",
  "filterType",
  "fingerprint",
  "firmwareVersion",
  "flagged",
  "floorNumber",
  "folderPath",
  "followCount",
  "fontFamily",
  "fontSize",
  "foregroundColor",
  "formatType",
  "forwardTo",
  "frameRate",
  "friendId",
  "fromDate",
  "gameId",
  "gateId",
  "geoLocation",
  "globalId",
  "grade",
  "groupName",
  "guestId",
  "handlerId",
  "hashKey",
  "headerImage",
  "height",
  "hiddenAt",
  "homePhone",
  "hostName",
  "hourlyRate",
  "houseNumber",
  "iconPath",
  "importId",
  "inactiveAt",
  "incidentId",
  "indexKey",
  "industryType",
  "insertedAt",
  "instanceId",
  "instructorId",
  "insuranceId",
  "integrationId",
  "invoiceId",
  "ipAddress",
  "isArchived",
  "isBillable",
  "isDefault",
  "isDraft",
  "isEnabled",
  "isFeatured",
  "isHidden",
  "isLocked",
  "isPublic",
  "isRequired",
  "isSystem",
  "itemCount",
  "jobTitle",
  "joinDate",
  "keyId",
  "keywords",
  "labelText",
  "languageCode",
  "lastLoginAt",
  "lastSeenAt",
  "latitude",
  "layerId",
  "levelId",
  "licenseKey",
  "likeCount",
  "linkId",
  "listId",
  "listingId",
  "loadTime",
  "localeId",
  "locationId",
  "lockoutEnd",
  "logLevel",
  "loginCount",
  "longitude",
  "macAddress",
  "machineId",
  "mainImage",
  "managerId",
  "manufacturerId",
  "mapId",
  "maritalStatus",
  "marketId",
  "maskType",
  "maxLimit",
  "maxValue",
  "memberCount",
  "menuId",
  "merchantId",
  "messageId",
  "metaDescription",
  "metaKeywords",
  "metaTitle",
  "meterNumber",
  "mimeType",
  "minLimit",
  "minValue",
  "mobileNumber",
  "modifiedAt",
  "moduleId",
  "monthlyRate",
  "moveId",
];

const dataTypes: [number, string][] = [
  [10, "int"],
  [10, "varchar"],
  [10, "text"],
  [10, "timestamp"],
  [1, "date"],
  [10, "bool"],
  [2, "json"],
  [2, "jsonb"],
  [10, "float"],
  [1, "decimal"],
  [2, "uuid"],
  [1, "inet"],
  [1, "cidr"],
  [1, "macaddr"],
  [1, "bytea"],
];

const alphabet = "abcdefghijklmnopqrstuvwxyz".split("");

export function any(arr: string[]) {
  return arr[Math.floor(Math.random() * arr.length)];
}

export function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

export function word(length: number) {
  return Array.from({ length }, () => any(alphabet)).join("");
}

export function randomCol() {
  return any(cols);
}

export function randomDataType() {
  return weightedOutcome(dataTypes);
}

export function randomTableName() {
  const prefixes = [
    "tbl",
    "vw",
    "sys",
    "app",
    "core",
    "tmp",
    "stg",
    "ref",
    "dim",
    "fact",
    "log",
    "agg",
    "rel",
    "tmp",
    "ver",
    "dst",
    "src",
    "cpy",
    "olk",
    "ext",
    "pub",
    "priv",
  ];
  const domains = [
    "user",
    "order",
    "payment",
    "product",
    "account",
    "transaction",
    "customer",
    "inventory",
    "audit",
    "config",
    "organization",
    "company",
    "record",
  ];
  const suffixes = [
    "data",
    "info",
    "log",
    "hist",
    "archive",
    "meta",
    "map",
    "rel",
    "type",
    "status",
    "seg",
    "div",
    "out",
    "extra",
    "notifications",
  ];
  const versions = ["v1", "v2", "legacy", "new", "temp", "2024", "2025"];

  const usePrefix = Math.random() > 0.5;
  const useSuffix = Math.random() > 0.7;
  const useVersion = Math.random() > 0.8;

  let name = "";

  if (usePrefix) {
    name += any(prefixes) + "_";
  }

  name += any(domains);

  if (useSuffix) {
    name += "_" + any(suffixes);
  }

  if (useVersion) {
    name += "_" + any(versions);
  }

  // Sometimes use camelCase instead of snake_case
  if (Math.random() > 0.7) {
    name = name
      .split("_")
      .map((part, i) => (i > 0 ? capitalize(part) : part))
      .join("");
  }

  return name;
}

/**
 * Random integer between from and to,
 * if "to" is undefined, from 0 to "from"
 */
export const random = (from, to) => {
  if (!to) {
    to = from;
    from = 0;
  }

  return Math.round(from + (to - from) * Math.random());
};

export function between(value: number, from: number, to: number) {
  return value >= from && value <= to;
}

export function weightedOutcome<Outcome>(outcomes: [number, Outcome][]) {
  const weights = outcomes.map(([weight]) => weight);
  const total = weights.reduce((a, b) => a + b, 0);
  const target = random(0, total);

  const ranges = weights.reduce((acc, weight, index) => {
    const previousWeight = index === 0 ? 0 : acc[index - 1][0][1];
    acc.push([[previousWeight, previousWeight + weight], outcomes[index][1]]);
    return acc;
  }, [] as [[number, number], Outcome][]);

  const targetRange = ranges.find(([range]) => between(target, ...range));
  return targetRange![1];
}
